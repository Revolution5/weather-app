(()=>{"use strict";!function(){let e=document.querySelector("form"),t=document.querySelector("#submit"),n="";t.addEventListener("click",(function(e){n=document.getElementById("search").value})),e.addEventListener("submit",(function(e){e.preventDefault(),function(e){let t=document.querySelector(".city"),n=document.querySelector(".country"),o=document.querySelector(".temp"),i=document.querySelector(".humidity"),c=document.querySelector(".feels-like"),r=document.querySelector(".wind");(async function(e){try{const t=await fetch("https://api.openweathermap.org/geo/1.0/direct?q="+e+"&appid=0a797fb7828e6df998b5f208074b34be",{mode:"cors"}),n=await t.json();let o=n[0].lat,i=n[0].lon;const c=await fetch("https://api.openweathermap.org/data/2.5/weather?lat="+o+"&lon="+i+"&appid=0a797fb7828e6df998b5f208074b34be&units=imperial",{mode:"cors"});return await c.json()}catch(e){console.log(e)}})(e).then((function(e){let u=function(e){let t={cityName:"",countryName:"",currentTemp:0,humidity:0,feelsLike:0,wind:0};return t.cityName=e.name,t.countryName=e.sys.country,t.currentTemp=e.main.temp,t.humidity=e.main.humidity,t.feelsLike=e.main.feels_like,t.wind=e.wind.speed,t}(e);t.textContent=u.cityName+", ",n.textContent=u.countryName,o.textContent=u.currentTemp+"°F",i.textContent="Humidity: "+u.humidity+"%",c.textContent="Feels Like: "+u.feelsLike+"°F",r.textContent="Wind Speed: "+u.wind+"MPH",console.log(u)}))}(n)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoib0JBRU8sV0FDSCxJQUFJQSxFQUFPQyxTQUFTQyxjQUFjLFFBQzlCQyxFQUFlRixTQUFTQyxjQUFjLFdBQ3RDRSxFQUFRLEdBRVpELEVBQWFFLGlCQUFpQixTQUFTLFNBQVNDLEdBQzVDRixFQUFRSCxTQUFTTSxlQUFlLFVBQVVDLFNBRzlDUixFQUFLSyxpQkFBaUIsVUFBVSxTQUFTQyxHQUNyQ0EsRUFBRUcsaUJBTVYsU0FBdUJMLEdBQ25CLElBQUlNLEVBQU9ULFNBQVNDLGNBQWMsU0FDOUJTLEVBQVVWLFNBQVNDLGNBQWMsWUFDakNVLEVBQU9YLFNBQVNDLGNBQWMsU0FDOUJXLEVBQVdaLFNBQVNDLGNBQWMsYUFDbENZLEVBQVliLFNBQVNDLGNBQWMsZUFDbkNhLEVBQU9kLFNBQVNDLGNBQWMsVUN0Qi9CYyxlQUE4Qk4sR0FDakMsSUFFSSxNQUFNTyxRQUF1QkMsTUFBTSxtREFBcURSLEVBQU8sMENBQy9GLENBQUNTLEtBQU0sU0FDREMsUUFBbUJILEVBQWVJLE9BQ3hDLElBQUlDLEVBQU1GLEVBQVcsR0FBR0UsSUFDcEJDLEVBQU1ILEVBQVcsR0FBR0csSUFHeEIsTUFBTUMsUUFBaUJOLE1BQU0sdURBQXlESSxFQUFNLFFBQVVDLEVBQU0seURBQzVHLENBQUNKLEtBQU0sU0FHUCxhQUYwQkssRUFBU0gsT0FJdkMsTUFBTUksR0FDRkMsUUFBUUMsSUFBSUYsS0RPaEJHLENBQWV4QixHQUNkeUIsTUFBSyxTQUFTQyxHQUNYLElBQUlDLEVDTEwsU0FBNEJDLEdBQy9CLElBQUlDLEVBQWUsQ0FDZkMsU0FBVSxHQUNWQyxZQUFhLEdBQ2JDLFlBQWEsRUFDYnZCLFNBQVUsRUFDVkMsVUFBVyxFQUNYQyxLQUFNLEdBVVYsT0FQQWtCLEVBQWFDLFNBQVdGLEVBQVlLLEtBQ3BDSixFQUFhRSxZQUFjSCxFQUFZTSxJQUFJM0IsUUFDM0NzQixFQUFhRyxZQUFjSixFQUFZTyxLQUFLM0IsS0FDNUNxQixFQUFhcEIsU0FBV21CLEVBQVlPLEtBQUsxQixTQUN6Q29CLEVBQWFuQixVQUFZa0IsRUFBWU8sS0FBS0MsV0FDMUNQLEVBQWFsQixLQUFPaUIsRUFBWWpCLEtBQUswQixNQUU5QlIsRURaU1MsQ0FBbUJaLEdBQy9CcEIsRUFBS2lDLFlBQWNaLEVBQU1HLFNBQVcsS0FDcEN2QixFQUFRZ0MsWUFBY1osRUFBTUksWUFDNUJ2QixFQUFLK0IsWUFBY1osRUFBTUssWUFBYyxLQUN2Q3ZCLEVBQVM4QixZQUFjLGFBQWVaLEVBQU1sQixTQUFXLElBQ3ZEQyxFQUFVNkIsWUFBYyxlQUFpQlosRUFBTWpCLFVBQVksS0FDM0RDLEVBQUs0QixZQUFjLGVBQWlCWixFQUFNaEIsS0FBTyxNQUNqRFcsUUFBUUMsSUFBSUksTUF0QlphLENBQWN4QyxNRVh0QnlDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvd2VhdGhlci1kYXRhLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFdlYXRoZXJEYXRhLCBwcm9jZXNzV2VhdGhlckRhdGEgfSBmcm9tIFwiLi93ZWF0aGVyLWRhdGFcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0KCkge1xuICAgIGxldCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG4gICAgbGV0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3VibWl0XCIpO1xuICAgIGxldCBpbnB1dCA9IFwiXCI7XG5cbiAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS52YWx1ZTtcbiAgICB9KVxuXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBwb3B1bGF0ZVN0YXRzKGlucHV0KTsgIFxuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gcG9wdWxhdGVTdGF0cyhpbnB1dCkge1xuICAgIGxldCBjaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaXR5XCIpO1xuICAgIGxldCBjb3VudHJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb3VudHJ5XCIpO1xuICAgIGxldCB0ZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZW1wXCIpO1xuICAgIGxldCBodW1pZGl0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaHVtaWRpdHlcIik7XG4gICAgbGV0IGZlZWxzTGlrZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlbHMtbGlrZVwiKTtcbiAgICBsZXQgd2luZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2luZFwiKTtcblxuICAgIGdldFdlYXRoZXJEYXRhKGlucHV0KVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGV0IHN0YXRzID0gcHJvY2Vzc1dlYXRoZXJEYXRhKGRhdGEpO1xuICAgICAgICBjaXR5LnRleHRDb250ZW50ID0gc3RhdHMuY2l0eU5hbWUgKyBcIiwgXCI7XG4gICAgICAgIGNvdW50cnkudGV4dENvbnRlbnQgPSBzdGF0cy5jb3VudHJ5TmFtZTtcbiAgICAgICAgdGVtcC50ZXh0Q29udGVudCA9IHN0YXRzLmN1cnJlbnRUZW1wICsgXCLCsEZcIjtcbiAgICAgICAgaHVtaWRpdHkudGV4dENvbnRlbnQgPSBcIkh1bWlkaXR5OiBcIiArIHN0YXRzLmh1bWlkaXR5ICsgXCIlXCI7XG4gICAgICAgIGZlZWxzTGlrZS50ZXh0Q29udGVudCA9IFwiRmVlbHMgTGlrZTogXCIgKyBzdGF0cy5mZWVsc0xpa2UgKyBcIsKwRlwiO1xuICAgICAgICB3aW5kLnRleHRDb250ZW50ID0gXCJXaW5kIFNwZWVkOiBcIiArIHN0YXRzLndpbmQgKyBcIk1QSFwiO1xuICAgICAgICBjb25zb2xlLmxvZyhzdGF0cyk7XG4gICAgfSkgXG59XG4iLCIvL0FQSSBrZXkgaXMgYSBmcmVlIHB1YmxpYyBrZXksIHRoZXJlZm9yZSBzaG93aW5nIGl0IGhlcmUgZG9lcyBub3QgbWF0dGVyXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyRGF0YShjaXR5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy9jb252ZXJ0IGNpdHkgbmFtZSB0byBjb29yZGluYXRlc1xuICAgICAgICBjb25zdCByZXNwb25zZUNvb3JkcyA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2dlby8xLjAvZGlyZWN0P3E9XCIgKyBjaXR5ICsgXCImYXBwaWQ9MGE3OTdmYjc4MjhlNmRmOTk4YjVmMjA4MDc0YjM0YmVcIiwgXG4gICAgICAgIHttb2RlOiBcImNvcnNcIn0pO1xuICAgICAgICBjb25zdCBjaXR5Q29vcmRzID0gYXdhaXQgcmVzcG9uc2VDb29yZHMuanNvbigpO1xuICAgICAgICBsZXQgbGF0ID0gY2l0eUNvb3Jkc1swXS5sYXQ7XG4gICAgICAgIGxldCBsb24gPSBjaXR5Q29vcmRzWzBdLmxvbjtcblxuICAgICAgICAvL3VzZSBjb29yZGluYXRlcyB0byBnZXQgd2VhdGhlciBkYXRhXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9sYXQ9XCIgKyBsYXQgKyBcIiZsb249XCIgKyBsb24gKyBcIiZhcHBpZD0wYTc5N2ZiNzgyOGU2ZGY5OThiNWYyMDgwNzRiMzRiZSZ1bml0cz1pbXBlcmlhbFwiLFxuICAgICAgICB7bW9kZTogXCJjb3JzXCJ9KTtcbiAgICAgICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgcmV0dXJuIHdlYXRoZXJEYXRhOyBcbiAgICB9XG4gICAgY2F0Y2goZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1dlYXRoZXJEYXRhKHdlYXRoZXJEYXRhKSB7XG4gICAgbGV0IHdlYXRoZXJTdGF0cyA9IHtcbiAgICAgICAgY2l0eU5hbWU6IFwiXCIsXG4gICAgICAgIGNvdW50cnlOYW1lOiBcIlwiLFxuICAgICAgICBjdXJyZW50VGVtcDogMCxcbiAgICAgICAgaHVtaWRpdHk6IDAsXG4gICAgICAgIGZlZWxzTGlrZTogMCxcbiAgICAgICAgd2luZDogMFxuICAgIH07XG5cbiAgICB3ZWF0aGVyU3RhdHMuY2l0eU5hbWUgPSB3ZWF0aGVyRGF0YS5uYW1lO1xuICAgIHdlYXRoZXJTdGF0cy5jb3VudHJ5TmFtZSA9IHdlYXRoZXJEYXRhLnN5cy5jb3VudHJ5O1xuICAgIHdlYXRoZXJTdGF0cy5jdXJyZW50VGVtcCA9IHdlYXRoZXJEYXRhLm1haW4udGVtcDtcbiAgICB3ZWF0aGVyU3RhdHMuaHVtaWRpdHkgPSB3ZWF0aGVyRGF0YS5tYWluLmh1bWlkaXR5O1xuICAgIHdlYXRoZXJTdGF0cy5mZWVsc0xpa2UgPSB3ZWF0aGVyRGF0YS5tYWluLmZlZWxzX2xpa2U7XG4gICAgd2VhdGhlclN0YXRzLndpbmQgPSB3ZWF0aGVyRGF0YS53aW5kLnNwZWVkO1xuXG4gICAgcmV0dXJuIHdlYXRoZXJTdGF0cztcbn1cbiIsImltcG9ydCB7IGdldElucHV0IH0gZnJvbSBcIi4vZG9tXCI7XG5cbmdldElucHV0KCk7Il0sIm5hbWVzIjpbImZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdWJtaXRCdXR0b24iLCJpbnB1dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiY2l0eSIsImNvdW50cnkiLCJ0ZW1wIiwiaHVtaWRpdHkiLCJmZWVsc0xpa2UiLCJ3aW5kIiwiYXN5bmMiLCJyZXNwb25zZUNvb3JkcyIsImZldGNoIiwibW9kZSIsImNpdHlDb29yZHMiLCJqc29uIiwibGF0IiwibG9uIiwicmVzcG9uc2UiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZ2V0V2VhdGhlckRhdGEiLCJ0aGVuIiwiZGF0YSIsInN0YXRzIiwid2VhdGhlckRhdGEiLCJ3ZWF0aGVyU3RhdHMiLCJjaXR5TmFtZSIsImNvdW50cnlOYW1lIiwiY3VycmVudFRlbXAiLCJuYW1lIiwic3lzIiwibWFpbiIsImZlZWxzX2xpa2UiLCJzcGVlZCIsInByb2Nlc3NXZWF0aGVyRGF0YSIsInRleHRDb250ZW50IiwicG9wdWxhdGVTdGF0cyIsImdldElucHV0Il0sInNvdXJjZVJvb3QiOiIifQ==