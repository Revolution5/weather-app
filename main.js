(()=>{"use strict";!function(){let e=document.querySelector("form"),t=document.querySelector("#submit"),n="";t.addEventListener("click",(function(e){n=document.getElementById("search").value})),e.addEventListener("submit",(function(e){e.preventDefault(),function(e){let t=document.querySelector(".city"),n=document.querySelector(".country"),o=document.querySelector(".temp"),i=document.querySelector(".humidity"),c=document.querySelector(".feels-like"),r=document.querySelector(".wind");(async function(e){try{const t=await fetch("https://api.openweathermap.org/geo/1.0/direct?q="+e+"&appid=0a797fb7828e6df998b5f208074b34be",{mode:"cors"}),n=await t.json();let o=n[0].lat,i=n[0].lon;const c=await fetch("https://api.openweathermap.org/data/2.5/weather?lat="+o+"&lon="+i+"&appid=0a797fb7828e6df998b5f208074b34be&units=imperial",{mode:"cors"});return await c.json()}catch(e){console.log(e)}})(e).then((function(e){let u=function(e){let t={cityName:"",countryName:"",currentTemp:0,humidity:0,feelsLike:0,wind:0};return t.cityName=e.name,t.countryName=e.sys.country,t.currentTemp=e.main.temp,t.humidity=e.main.humidity,t.feelsLike=e.main.feels_like,t.wind=e.wind.speed,t}(e);t.textContent=u.cityName+", ",n.textContent=u.countryName,o.textContent=u.currentTemp+"°",i.textContent="Humidity: "+u.humidity+"%",c.textContent="Feels Like: "+u.feelsLike+"°",r.textContent="Wind Speed: "+u.wind+"MPH",console.log(u)}))}(n)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoib0JBRU8sV0FDSCxJQUFJQSxFQUFPQyxTQUFTQyxjQUFjLFFBQzlCQyxFQUFlRixTQUFTQyxjQUFjLFdBQ3RDRSxFQUFRLEdBRVpELEVBQWFFLGlCQUFpQixTQUFTLFNBQVNDLEdBQzVDRixFQUFRSCxTQUFTTSxlQUFlLFVBQVVDLFNBRzlDUixFQUFLSyxpQkFBaUIsVUFBVSxTQUFTQyxHQUNyQ0EsRUFBRUcsaUJBTVYsU0FBdUJMLEdBQ25CLElBQUlNLEVBQU9ULFNBQVNDLGNBQWMsU0FDOUJTLEVBQVVWLFNBQVNDLGNBQWMsWUFDakNVLEVBQU9YLFNBQVNDLGNBQWMsU0FDOUJXLEVBQVdaLFNBQVNDLGNBQWMsYUFDbENZLEVBQVliLFNBQVNDLGNBQWMsZUFDbkNhLEVBQU9kLFNBQVNDLGNBQWMsVUN0Qi9CYyxlQUE4Qk4sR0FDakMsSUFFSSxNQUFNTyxRQUF1QkMsTUFBTSxtREFBcURSLEVBQU8sMENBQy9GLENBQUNTLEtBQU0sU0FDREMsUUFBbUJILEVBQWVJLE9BQ3hDLElBQUlDLEVBQU1GLEVBQVcsR0FBR0UsSUFDcEJDLEVBQU1ILEVBQVcsR0FBR0csSUFHeEIsTUFBTUMsUUFBaUJOLE1BQU0sdURBQXlESSxFQUFNLFFBQVVDLEVBQU0seURBQzVHLENBQUNKLEtBQU0sU0FHUCxhQUYwQkssRUFBU0gsT0FJdkMsTUFBTUksR0FDRkMsUUFBUUMsSUFBSUYsS0RPaEJHLENBQWV4QixHQUNkeUIsTUFBSyxTQUFTQyxHQUNYLElBQUlDLEVDTEwsU0FBNEJDLEdBQy9CLElBQUlDLEVBQWUsQ0FDZkMsU0FBVSxHQUNWQyxZQUFhLEdBQ2JDLFlBQWEsRUFDYnZCLFNBQVUsRUFDVkMsVUFBVyxFQUNYQyxLQUFNLEdBVVYsT0FQQWtCLEVBQWFDLFNBQVdGLEVBQVlLLEtBQ3BDSixFQUFhRSxZQUFjSCxFQUFZTSxJQUFJM0IsUUFDM0NzQixFQUFhRyxZQUFjSixFQUFZTyxLQUFLM0IsS0FDNUNxQixFQUFhcEIsU0FBV21CLEVBQVlPLEtBQUsxQixTQUN6Q29CLEVBQWFuQixVQUFZa0IsRUFBWU8sS0FBS0MsV0FDMUNQLEVBQWFsQixLQUFPaUIsRUFBWWpCLEtBQUswQixNQUU5QlIsRURaU1MsQ0FBbUJaLEdBQy9CcEIsRUFBS2lDLFlBQWNaLEVBQU1HLFNBQVcsS0FDcEN2QixFQUFRZ0MsWUFBY1osRUFBTUksWUFDNUJ2QixFQUFLK0IsWUFBY1osRUFBTUssWUFBYyxJQUN2Q3ZCLEVBQVM4QixZQUFjLGFBQWVaLEVBQU1sQixTQUFXLElBQ3ZEQyxFQUFVNkIsWUFBYyxlQUFpQlosRUFBTWpCLFVBQVksSUFDM0RDLEVBQUs0QixZQUFjLGVBQWlCWixFQUFNaEIsS0FBTyxNQUNqRFcsUUFBUUMsSUFBSUksTUF0QlphLENBQWN4QyxNRVh0QnlDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvd2VhdGhlci1kYXRhLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFdlYXRoZXJEYXRhLCBwcm9jZXNzV2VhdGhlckRhdGEgfSBmcm9tIFwiLi93ZWF0aGVyLWRhdGFcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0KCkge1xuICAgIGxldCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG4gICAgbGV0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3VibWl0XCIpO1xuICAgIGxldCBpbnB1dCA9IFwiXCI7XG5cbiAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaFwiKS52YWx1ZTtcbiAgICB9KVxuXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBwb3B1bGF0ZVN0YXRzKGlucHV0KTsgIFxuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gcG9wdWxhdGVTdGF0cyhpbnB1dCkge1xuICAgIGxldCBjaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaXR5XCIpO1xuICAgIGxldCBjb3VudHJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb3VudHJ5XCIpO1xuICAgIGxldCB0ZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZW1wXCIpO1xuICAgIGxldCBodW1pZGl0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaHVtaWRpdHlcIik7XG4gICAgbGV0IGZlZWxzTGlrZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlbHMtbGlrZVwiKTtcbiAgICBsZXQgd2luZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2luZFwiKTtcblxuICAgIGdldFdlYXRoZXJEYXRhKGlucHV0KVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGV0IHN0YXRzID0gcHJvY2Vzc1dlYXRoZXJEYXRhKGRhdGEpO1xuICAgICAgICBjaXR5LnRleHRDb250ZW50ID0gc3RhdHMuY2l0eU5hbWUgKyBcIiwgXCI7XG4gICAgICAgIGNvdW50cnkudGV4dENvbnRlbnQgPSBzdGF0cy5jb3VudHJ5TmFtZTtcbiAgICAgICAgdGVtcC50ZXh0Q29udGVudCA9IHN0YXRzLmN1cnJlbnRUZW1wICsgXCLCsFwiO1xuICAgICAgICBodW1pZGl0eS50ZXh0Q29udGVudCA9IFwiSHVtaWRpdHk6IFwiICsgc3RhdHMuaHVtaWRpdHkgKyBcIiVcIjtcbiAgICAgICAgZmVlbHNMaWtlLnRleHRDb250ZW50ID0gXCJGZWVscyBMaWtlOiBcIiArIHN0YXRzLmZlZWxzTGlrZSArIFwiwrBcIjtcbiAgICAgICAgd2luZC50ZXh0Q29udGVudCA9IFwiV2luZCBTcGVlZDogXCIgKyBzdGF0cy53aW5kICsgXCJNUEhcIjtcbiAgICAgICAgY29uc29sZS5sb2coc3RhdHMpO1xuICAgIH0pIFxufVxuIiwiLy9BUEkga2V5IGlzIGEgZnJlZSBwdWJsaWMga2V5LCB0aGVyZWZvcmUgc2hvd2luZyBpdCBoZXJlIGRvZXMgbm90IG1hdHRlclxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0V2VhdGhlckRhdGEoY2l0eSkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vY29udmVydCBjaXR5IG5hbWUgdG8gY29vcmRpbmF0ZXNcbiAgICAgICAgY29uc3QgcmVzcG9uc2VDb29yZHMgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9nZW8vMS4wL2RpcmVjdD9xPVwiICsgY2l0eSArIFwiJmFwcGlkPTBhNzk3ZmI3ODI4ZTZkZjk5OGI1ZjIwODA3NGIzNGJlXCIsIFxuICAgICAgICB7bW9kZTogXCJjb3JzXCJ9KTtcbiAgICAgICAgY29uc3QgY2l0eUNvb3JkcyA9IGF3YWl0IHJlc3BvbnNlQ29vcmRzLmpzb24oKTtcbiAgICAgICAgbGV0IGxhdCA9IGNpdHlDb29yZHNbMF0ubGF0O1xuICAgICAgICBsZXQgbG9uID0gY2l0eUNvb3Jkc1swXS5sb247XG5cbiAgICAgICAgLy91c2UgY29vcmRpbmF0ZXMgdG8gZ2V0IHdlYXRoZXIgZGF0YVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/bGF0PVwiICsgbGF0ICsgXCImbG9uPVwiICsgbG9uICsgXCImYXBwaWQ9MGE3OTdmYjc4MjhlNmRmOTk4YjVmMjA4MDc0YjM0YmUmdW5pdHM9aW1wZXJpYWxcIixcbiAgICAgICAge21vZGU6IFwiY29yc1wifSk7XG4gICAgICAgIGNvbnN0IHdlYXRoZXJEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAgIHJldHVybiB3ZWF0aGVyRGF0YTsgXG4gICAgfVxuICAgIGNhdGNoKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NXZWF0aGVyRGF0YSh3ZWF0aGVyRGF0YSkge1xuICAgIGxldCB3ZWF0aGVyU3RhdHMgPSB7XG4gICAgICAgIGNpdHlOYW1lOiBcIlwiLFxuICAgICAgICBjb3VudHJ5TmFtZTogXCJcIixcbiAgICAgICAgY3VycmVudFRlbXA6IDAsXG4gICAgICAgIGh1bWlkaXR5OiAwLFxuICAgICAgICBmZWVsc0xpa2U6IDAsXG4gICAgICAgIHdpbmQ6IDBcbiAgICB9O1xuXG4gICAgd2VhdGhlclN0YXRzLmNpdHlOYW1lID0gd2VhdGhlckRhdGEubmFtZTtcbiAgICB3ZWF0aGVyU3RhdHMuY291bnRyeU5hbWUgPSB3ZWF0aGVyRGF0YS5zeXMuY291bnRyeTtcbiAgICB3ZWF0aGVyU3RhdHMuY3VycmVudFRlbXAgPSB3ZWF0aGVyRGF0YS5tYWluLnRlbXA7XG4gICAgd2VhdGhlclN0YXRzLmh1bWlkaXR5ID0gd2VhdGhlckRhdGEubWFpbi5odW1pZGl0eTtcbiAgICB3ZWF0aGVyU3RhdHMuZmVlbHNMaWtlID0gd2VhdGhlckRhdGEubWFpbi5mZWVsc19saWtlO1xuICAgIHdlYXRoZXJTdGF0cy53aW5kID0gd2VhdGhlckRhdGEud2luZC5zcGVlZDtcblxuICAgIHJldHVybiB3ZWF0aGVyU3RhdHM7XG59XG4iLCJpbXBvcnQgeyBnZXRJbnB1dCB9IGZyb20gXCIuL2RvbVwiO1xuXG5nZXRJbnB1dCgpOyJdLCJuYW1lcyI6WyJmb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3VibWl0QnV0dG9uIiwiaW5wdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsImNpdHkiLCJjb3VudHJ5IiwidGVtcCIsImh1bWlkaXR5IiwiZmVlbHNMaWtlIiwid2luZCIsImFzeW5jIiwicmVzcG9uc2VDb29yZHMiLCJmZXRjaCIsIm1vZGUiLCJjaXR5Q29vcmRzIiwianNvbiIsImxhdCIsImxvbiIsInJlc3BvbnNlIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImdldFdlYXRoZXJEYXRhIiwidGhlbiIsImRhdGEiLCJzdGF0cyIsIndlYXRoZXJEYXRhIiwid2VhdGhlclN0YXRzIiwiY2l0eU5hbWUiLCJjb3VudHJ5TmFtZSIsImN1cnJlbnRUZW1wIiwibmFtZSIsInN5cyIsIm1haW4iLCJmZWVsc19saWtlIiwic3BlZWQiLCJwcm9jZXNzV2VhdGhlckRhdGEiLCJ0ZXh0Q29udGVudCIsInBvcHVsYXRlU3RhdHMiLCJnZXRJbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=